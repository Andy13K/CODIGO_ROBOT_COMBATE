#include <WiFi.h>
#include <WebServer.h>

// ═══════════════════════════════════════════════════════════
// CONFIGURACIÓN DE RED WiFi
// ═══════════════════════════════════════════════════════════
const char* ssid = "RobotPelea";           // Nombre de la red WiFi
const char* password = "12345678";          // Contraseña (mínimo 8 caracteres)

// ═══════════════════════════════════════════════════════════
// PINES DEL BTS7960
// ═══════════════════════════════════════════════════════════
#define RPWM 26    // Control velocidad adelante (PWM)
#define LPWM 27    // Control velocidad reversa (PWM)
#define R_EN 14    // Enable canal derecho
#define L_EN 12    // Enable canal izquierdo
#define LED_BUILTIN 2  // LED integrado del ESP32

// ═══════════════════════════════════════════════════════════
// VARIABLES GLOBALES
// ═══════════════════════════════════════════════════════════
WebServer server(80);           // Servidor web en puerto 80
int velocidadActual = 0;        // Velocidad actual del motor (0-255)
bool motorEncendido = false;    // Estado del motor
unsigned long tiempoInicio;     // Para calcular tiempo de operación

// ═══════════════════════════════════════════════════════════
// FUNCIONES DE CONTROL DEL MOTOR
// ═══════════════════════════════════════════════════════════

// Encender motor a velocidad específica
void encenderMotor(int velocidad) {
  if(velocidad < 0) velocidad = 0;
  if(velocidad > 255) velocidad = 255;
  
  velocidadActual = velocidad;
  motorEncendido = true;
  
  digitalWrite(R_EN, HIGH);
  digitalWrite(L_EN, HIGH);
  analogWrite(RPWM, velocidad);
  analogWrite(LPWM, 0);
  digitalWrite(LED_BUILTIN, HIGH);
  
  Serial.print("Motor ENCENDIDO - Velocidad: ");
  Serial.print((velocidad * 100) / 255);
  Serial.println("%");
}

// Apagar motor
void apagarMotor() {
  velocidadActual = 0;
  motorEncendido = false;
  
  analogWrite(RPWM, 0);
  analogWrite(LPWM, 0);
  digitalWrite(LED_BUILTIN, LOW);
  
  Serial.println("Motor APAGADO");
}

// ═══════════════════════════════════════════════════════════
// PÁGINA WEB PRINCIPAL
// ═══════════════════════════════════════════════════════════
void handleRoot() {
  String html = R"rawliteral(
<!DOCTYPE html>
<html lang='es'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Robot de Pelea - Control</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            padding: 40px;
            max-width: 500px;
            width: 100%;
        }
        
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2em;
        }
        
        .subtitle {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
            font-size: 0.9em;
        }
        
        .status {
            background: #f0f0f0;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
        }
        
        .status-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 10px;
            background: white;
            border-radius: 5px;
        }
        
        .status-item:last-child {
            margin-bottom: 0;
        }
        
        .label {
            font-weight: bold;
            color: #555;
        }
        
        .value {
            color: #667eea;
            font-weight: bold;
        }
        
        .controls {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .btn {
            padding: 18px;
            font-size: 1.1em;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .btn:active {
            transform: scale(0.95);
        }
        
        .btn-on {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            color: white;
            box-shadow: 0 5px 15px rgba(56, 239, 125, 0.4);
        }
        
        .btn-on:hover {
            box-shadow: 0 8px 25px rgba(56, 239, 125, 0.6);
        }
        
        .btn-off {
            background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%);
            color: white;
            box-shadow: 0 5px 15px rgba(238, 9, 121, 0.4);
        }
        
        .btn-off:hover {
            box-shadow: 0 8px 25px rgba(238, 9, 121, 0.6);
        }
        
        .slider-container {
            margin: 20px 0;
        }
        
        .slider-label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
            color: #555;
            text-align: center;
        }
        
        .slider {
            width: 100%;
            height: 8px;
            border-radius: 5px;
            background: #ddd;
            outline: none;
            -webkit-appearance: none;
        }
        
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #667eea;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .slider::-moz-range-thumb {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #667eea;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .velocity-display {
            text-align: center;
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
            margin: 10px 0;
        }
        
        .footer {
            margin-top: 30px;
            text-align: center;
            color: #999;
            font-size: 0.85em;
        }
        
        .indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .indicator-on {
            background: #38ef7d;
            box-shadow: 0 0 10px #38ef7d;
        }
        
        .indicator-off {
            background: #ee0979;
            box-shadow: 0 0 10px #ee0979;
        }
        
        @media (max-width: 600px) {
            .container {
                padding: 25px;
            }
            
            h1 {
                font-size: 1.5em;
            }
            
            .btn {
                padding: 15px;
                font-size: 1em;
            }
        }
    </style>
</head>
<body>
    <div class='container'>
        <h1>⚔️ Robot de Pelea</h1>
        <p class='subtitle'>Control Remoto WiFi</p>
        
        <div class='status'>
            <div class='status-item'>
                <span class='label'>Estado:</span>
                <span class='value' id='status'>
                    <span class='indicator indicator-off'></span>
                    APAGADO
                </span>
            </div>
            <div class='status-item'>
                <span class='label'>Velocidad:</span>
                <span class='value' id='speed'>0%</span>
            </div>
            <div class='status-item'>
                <span class='label'>Conexión:</span>
                <span class='value'>✅ CONECTADO</span>
            </div>
        </div>
        
        <div class='slider-container'>
            <label class='slider-label'>Control de Velocidad</label>
            <div class='velocity-display' id='velocityValue'>0%</div>
            <input type='range' min='0' max='100' value='50' class='slider' id='velocitySlider'>
        </div>
        
        <div class='controls'>
            <button class='btn btn-on' onclick='encender()'>▶️ ENCENDER MOTOR</button>
            <button class='btn btn-off' onclick='apagar()'>⏹️ APAGAR MOTOR</button>
        </div>
        
        <div class='footer'>
            <p>🤖 Proyecto Arquitectura de Computadoras</p>
            <p>ESP32 + BTS7960 + Motor DC 555</p>
        </div>
    </div>
    
    <script>
        const slider = document.getElementById('velocitySlider');
        const velocityDisplay = document.getElementById('velocityValue');
        
        slider.oninput = function() {
            velocityDisplay.textContent = this.value + '%';
        }
        
        function encender() {
            const velocidad = slider.value;
            fetch('/encender?velocidad=' + velocidad)
                .then(response => response.text())
                .then(data => {
                    document.getElementById('status').innerHTML = 
                        '<span class="indicator indicator-on"></span>ENCENDIDO';
                    document.getElementById('speed').textContent = velocidad + '%';
                    alert('Motor encendido al ' + velocidad + '%');
                })
                .catch(error => {
                    alert('Error de conexión');
                });
        }
        
        function apagar() {
            fetch('/apagar')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('status').innerHTML = 
                        '<span class="indicator indicator-off"></span>APAGADO';
                    document.getElementById('speed').textContent = '0%';
                    alert('Motor apagado');
                })
                .catch(error => {
                    alert('Error de conexión');
                });
        }
        
        // Actualizar estado cada 2 segundos
        setInterval(function() {
            fetch('/estado')
                .then(response => response.json())
                .then(data => {
                    if(data.encendido) {
                        document.getElementById('status').innerHTML = 
                            '<span class="indicator indicator-on"></span>ENCENDIDO';
                        document.getElementById('speed').textContent = data.velocidad + '%';
                    } else {
                        document.getElementById('status').innerHTML = 
                            '<span class="indicator indicator-off"></span>APAGADO';
                        document.getElementById('speed').textContent = '0%';
                    }
                });
        }, 2000);
    </script>
</body>
</html>
)rawliteral";
  
  server.send(200, "text/html", html);
}

// ═══════════════════════════════════════════════════════════
// ENDPOINT: ENCENDER MOTOR
// ═══════════════════════════════════════════════════════════
void handleEncender() {
  if(server.hasArg("velocidad")) {
    int vel = server.arg("velocidad").toInt();
    int velocidad255 = map(vel, 0, 100, 0, 255);
    encenderMotor(velocidad255);
    server.send(200, "text/plain", "Motor encendido al " + String(vel) + "%");
  } else {
    encenderMotor(191); // 75% por defecto
    server.send(200, "text/plain", "Motor encendido al 75%");
  }
}

// ═══════════════════════════════════════════════════════════
// ENDPOINT: APAGAR MOTOR
// ═══════════════════════════════════════════════════════════
void handleApagar() {
  apagarMotor();
  server.send(200, "text/plain", "Motor apagado");
}

// ═══════════════════════════════════════════════════════════
// ENDPOINT: ESTADO DEL SISTEMA
// ═══════════════════════════════════════════════════════════
void handleEstado() {
  String json = "{";
  json += "\"encendido\":" + String(motorEncendido ? "true" : "false") + ",";
  json += "\"velocidad\":" + String((velocidadActual * 100) / 255);
  json += "}";
  
  server.send(200, "application/json", json);
}

// ═══════════════════════════════════════════════════════════
// CONFIGURACIÓN INICIAL
// ═══════════════════════════════════════════════════════════
void setup() {
  // Inicializar comunicación serial
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n\n");
  Serial.println("═══════════════════════════════════════════");
  Serial.println("   ROBOT DE PELEA - Sistema Iniciando");
  Serial.println("═══════════════════════════════════════════");
  
  // Configurar pines del motor
  pinMode(RPWM, OUTPUT);
  pinMode(LPWM, OUTPUT);
  pinMode(R_EN, OUTPUT);
  pinMode(L_EN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  
  // Habilitar canales del BTS7960
  digitalWrite(R_EN, HIGH);
  digitalWrite(L_EN, HIGH);
  
  // Motor apagado al inicio
  apagarMotor();
  
  Serial.println("✓ Pines configurados");
  Serial.println("✓ BTS7960 habilitado");
  
  // Crear red WiFi
  Serial.println("\nCreando red WiFi...");
  Serial.print("SSID: ");
  Serial.println(ssid);
  
  WiFi.softAP(ssid, password);
  delay(100);
  
  IPAddress IP = WiFi.softAPIP();
  Serial.println("\n✓ Red WiFi creada exitosamente");
  Serial.print("✓ IP del servidor: ");
  Serial.println(IP);
  Serial.println("✓ Contraseña: " + String(password));
  
  // Configurar rutas del servidor web
  server.on("/", handleRoot);
  server.on("/encender", handleEncender);
  server.on("/apagar", handleApagar);
  server.on("/estado", handleEstado);
  
  // Iniciar servidor
  server.begin();
  Serial.println("✓ Servidor web iniciado");
  
  Serial.println("\n═══════════════════════════════════════════");
  Serial.println("   SISTEMA LISTO");
  Serial.println("═══════════════════════════════════════════");
  Serial.println("\nPara controlar el robot:");
  Serial.println("1. Conectar celular a WiFi: " + String(ssid));
  Serial.println("2. Contraseña: " + String(password));
  Serial.println("3. Abrir navegador en: http://" + IP.toString());
  Serial.println("\n");
  
  // Parpadeo de confirmación
  for(int i = 0; i < 5; i++) {
    digitalWrite(LED_BUILTIN, HIGH);
    delay(100);
    digitalWrite(LED_BUILTIN, LOW);
    delay(100);
  }
  
  tiempoInicio = millis();
}

// ═══════════════════════════════════════════════════════════
// BUCLE PRINCIPAL
// ═══════════════════════════════════════════════════════════
void loop() {
  // Manejar peticiones del servidor web
  server.handleClient();
  
  // Mostrar estado cada 10 segundos
  static unsigned long ultimoReporte = 0;
  if(millis() - ultimoReporte > 10000) {
    ultimoReporte = millis();
    
    Serial.println("\n─── Estado del Sistema ───");
    Serial.print("Tiempo operación: ");
    Serial.print((millis() - tiempoInicio) / 1000);
    Serial.println(" segundos");
    Serial.print("Motor: ");
    Serial.println(motorEncendido ? "ENCENDIDO" : "APAGADO");
    Serial.print("Velocidad: ");
    Serial.print((velocidadActual * 100) / 255);
    Serial.println("%");
    Serial.print("Clientes WiFi: ");
    Serial.println(WiFi.softAPgetStationNum());
    Serial.println("──────────────────────────\n");
  }
}
